<?xml version="1.0" encoding="UTF-8"?>
<project name="vantomas" default="run">
	<property name="environment" value="dev" />
	<property name="basic_auth.htaccess" value="#" />

	<property file="./build.${environment}.properties" />
	<property file="./build.${environment}.secret.properties" />

	<!--
		 === TOC ===========================================================

		 - Main - Basic components for building or setting up the project
		 - TYPO3 - TYPO3.CMS specific build targets
		 - QA - Quality assurance toolchain
		 - Sync - Helps syncing content (assets, database)
		 - Release - Release / deployment targets

	-->

	<!-- === Main ========================================================== -->

	<target name="cleanup"
			description="Cleans up the build directory">

		<echo msg="Cleaning up ${distDir}..." />

		<delete includeemptydirs="true">
			<fileset dir="${distDir}">
				<include name="*.*" />
				<include name="typo3/**" />
				<include name="typo3conf/ext/**" />
			</fileset>
		</delete>
	</target>

	<target name="setup-basic-auth"
			description="Sets up Basic Auth protection"
			if="useBasicAuth">

		<loadfile
			property="basic_auth.htaccess"
			file="./data/web/basic_auth.tpl.htaccess" />

		<copy file="./data/.tpl.htpasswd" tofile="./data/.htpasswd">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<target name="copy-web-data"
			description="Copies data/web/ into the release directory"
			depends="setup-basic-auth">

		<!-- copy non-template files -->
		<copy todir="${distDir}" overwrite="true">
			<fileset dir="./data/web">
				<include name="**/**" />
				<exclude name="**/*.tpl.*" />
			</fileset>
		</copy>

		<!-- copy tpl files, rename them and insert properties -->
		<copy todir="${distDir}" overwrite="true">
			<fileset dir="./data/web">
				<include name="**/**" />
				<exclude name="**/basic_auth.tpl.htaccess" />
			</fileset>

			<mapper type="regexp" from="^(.*)\.tpl\.(.*)" to="\1.\2" />

			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<target name="compile-application"
			description="Compiles the TYPO3.CMS core + extensions into the release directory."
			depends="typo3:copy-core, typo3:copy-extensions">

		<echo>TYPO3.CMS compilation finished.</echo>
	</target>

	<target name="run"
			description="Runs the build process"
			depends="qa, cleanup, compile-application, copy-web-data, release:rsync"
			if="environment">

		<echo>Build finished.</echo>
	</target>

	<!-- === TYPO3 ========================================================= -->

	<target name="typo3:prepare"
			description="Prepares the TYPO3.CMS directory structure for user data">

		<mkdir dir="${distDir}/fileadmin/user_upload" />
		<mkdir dir="${distDir}/typo3conf/ext" />
		<mkdir dir="${distDir}/typo3conf/l10n" />
		<mkdir dir="${distDir}/typo3temp" />
		<mkdir dir="${distDir}/uploads/media" />
		<mkdir dir="${distDir}/uploads/pics" />
	</target>

	<target name="typo3:copy-core"
			description="Copies the TYPO3 core into the release directory."
			depends="typo3:prepare">

		<copy todir="${distDir}" overwrite="true">
			<fileset dir="./vendor/typo3/cms/">
				<include name="typo3/**" />
				<include name="index.php" />

				<exclude name="**/.git*" />
				<exclude name="**/Tests/**" />
			</fileset>
		</copy>
	</target>

	<target name="typo3:copy-vendor-extensions"
			description="Copies the vendor extension into the typo3conf/ext/ release directory"
			depends="typo3:prepare">

		<copy todir="${distDir}/typo3conf/ext">
			<fileset dir="./vendor/typo3-cms-extension">
				<include name="**/**" />

				<exclude name="**/.git*" />
				<exclude name="**/Tests/**" />
			</fileset>
		</copy>
	</target>

	<target name="typo3:copy-project-extensions"
			description="Copies the project extensions into the typo3conf/ext/ release directory"
			depends="typo3:prepare">

		<copy todir="src/" overwrite="true">
			<mapper type="regexp" from="^(.*)\.tpl\.(.*)" to="\1.\2" />
			<filterchain>
				<expandproperties />
			</filterchain>

			<fileset dir="./src">
				<include name="**/**" />

				<exclude name="**/.git*" />
				<exclude name="**/Tests/**" />
			</fileset>
		</copy>

		<exec
			command="/usr/bin/env grunt build"
			passthru="true"
			checkreturn="true" />

		<copy todir="${distDir}/typo3conf/ext" overwrite="true">
			<fileset dir="./src">
				<include name="**/**" />

				<exclude name="**/.git*" />
				<exclude name="**/*.tpl.*" />
				<exclude name="**/Tests/**" />
			</fileset>
		</copy>
	</target>

	<target name="typo3:copy-extensions"
			description="Copies the extensions into typo3conf/ext/ release directory"
			depends="typo3:copy-vendor-extensions, typo3:copy-project-extensions">

		<echo>Extensions copied.</echo>
	</target>

	<!-- === QA ============================================================ -->

	<target name="qa:prepare" unless="releasing">
		<mkdir dir="${project.basedir}/build/phpunit-coverage" />
	</target>

	<target name="qa:phpmd"
			description="Runs phpmd on src/"
			depends="qa:prepare"
			unless="releasing">

		<exec
			executable="/usr/bin/env"
			checkreturn="false"
			passthru="true">

			<arg value="php" />
			<arg value="./vendor/bin/phpmd" />
			<arg value="./src/vantomas/Classes/" />
			<arg value="xml" />
			<arg value="codesize,unusedcode,naming,design" />
			<arg line="--reportfile ./build/phpmd.xml" />
			<arg line="--suffixes php" />
		</exec>
	</target>

	<target name="qa:pdepend"
			description="Runs pdepend on src/"
			depends="qa:prepare"
			unless="releasing">

		<exec
			executable="/usr/bin/env"
			checkreturn="false"
			passthru="true">

			<arg value="php" />
			<arg value="./vendor/bin/pdepend" />
			<arg line="--jdepend-chart=./build/jdepend.svg" />
			<arg line="--jdepend-xml=./build/jdepend.xml" />
			<arg line="--overview-pyramid=./build/jdepend-pyramid.svg" />
			<arg line="--summary-xml=./build/pdepend-summary.xml" />
			<arg line="--suffix=php" />
			<arg value="./src/vantomas/Classes/" />
		</exec>
	</target>

	<target name="qa:phploc"
			description="Runs phploc on src/"
			depends="qa:prepare"
			unless="releasing">

		<exec
			executable="/usr/bin/env"
			checkreturn="false"
			passthru="true">

			<arg value="php" />
			<arg value="${project.basedir}/vendor/bin/phploc" />
			<arg line="--names=*.php" />
			<arg line="--log-csv=${project.basedir}/build/phploc.csv" />
			<arg line="--log-xml=${project.basedir}/build/phploc.xml" />
			<arg line="--progress " />
			<arg value="${project.basedir}/src/" />
		</exec>
	</target>

	<target name="qa:phpcpd"
			description="Runs phpcpd on src/"
			depends="qa:prepare"
			unless="releasing">

		<exec
			executable="/usr/bin/env"
			checkreturn="false"
			passthru="true">

			<arg value="php" />
			<arg value="${project.basedir}/vendor/bin/phpcpd" />
			<arg line="--names=*.php" />
			<arg line="--names-exclude=ext_emconf.php,ext_localconf.php,ext_tables.php" />
			<arg line="--log-pmd=${project.basedir}/build/phpcpd.xml" />
			<arg line="--progress" />
			<arg value="./src/" />
		</exec>
	</target>

	<target name="qa:phpcs"
			description="Runs phpcs on src/"
			depends="qa:prepare"
			unless="releasing">

		<exec
			executable="/usr/bin/env"
			checkreturn="false"
			passthru="true">

			<arg value="php" />
			<arg value="${project.basedir}/vendor/bin/phpcs" />
			<arg line="-np" />
			<arg line="--report=checkstyle" />
			<arg line="--report-checkstyle=${project.basedir}/build/phpcs-checkstyle.xml" />
			<arg line="--standard=TYPO3CMS" />
			<arg line="--ignore=**/vendor/**" />
			<arg line="-d error_reporting='E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT &amp; ~E_DEPRECATED'" />
			<arg line="--extensions=php" />
			<arg value="${project.basedir}/src/" />
		</exec>
	</target>

	<target name="qa:phpunit"
			description="Runs phpunit on src/"
			depends="qa:prepare"
			unless="releasing">

		<exec
			executable="/usr/bin/env"
			checkreturn="true"
			passthru="true">

			<arg value="php" />
			<arg value="${project.basedir}/vendor/bin/phpunit" />
			<arg line="-c ${project.basedir}/phpunit.dist.xml" />
		</exec>
	</target>

	<target name="qa"
			description="Runs the QA toolchain"
			depends="qa:phpmd, qa:pdepend, qa:phploc, qa:phpcpd, qa:phpcs, qa:phpunit"
			unless="releasing">

		<echo>QA toolchain ready.</echo>
	</target>

	<!-- === Sync ========================================================== -->

	<target name="sync:db" description="Downsyncs the database from the remote host.">
		<exec
			executable="ssh"
			checkreturn="true"
			passthru="true">

			<arg line="-p ${ssh.port}" />
			<arg line="${ssh.user}@${ssh.host}" />
			<arg line="'mysqldump -u${database.username} -p${database.password} -h ${database.host} ${database.name} | gzip -9 &gt; ${remote.path}dump.sql.gz'" />
		</exec>

		<exec
			executable="rsync"
			checkreturn="true"
			passthru="true">

			<arg line="-avz" />
			<arg line="--progress" />
			<arg line="${ssh.user}@${ssh.host}:${remote.path}/dump.sql.gz" />
			<arg value="${project.basedir}/data/db/" />
		</exec>

		<exec
			executable="ssh"
			checkreturn="true"
			passthru="true">

			<arg line="-p ${ssh.port}" />
			<arg line="${ssh.user}@${ssh.host}" />
			<arg line="'cd ${remote.path} &amp;&amp; rm -f dump.sql.gz'" />
		</exec>
	</target>

	<target name="sync:files" description="Downsyncs the content assets">
		<exec
			executable="rsync"
			checkreturn="true"
			passthru="true">

			<arg line="-ravc" />
			<arg line="--progress" />
			<arg line="--rsh='ssh -p${ssh.port}'" />
			<arg line="--exclude-from=${project.basedir}/rsync/file_sync_exclude.txt" />
			<arg line="${ssh.user}@${ssh.host}:${remote.path}/fileadmin/" />
			<arg line="${project.basedir}/data/web/fileadmin" />
		</exec>
	</target>

	<!-- === Release ======================================================= -->

	<target name="release:rsync:project"
			description="Deploys the project via rsync to the remote host"
			if="releasing">

		<echo>Rsyncing to ${environment}</echo>
		<exec
			dir="${project.basedir}"
			executable="rsync"
			checkreturn="true"
			passthru="true">

			<arg line="-ravc" />
			<arg line="--progress" />
			<arg line="--delete" />
			<arg line="--rsh='ssh -p${ssh.port}'" />
			<arg line="--exclude-from=${project.basedir}/rsync/release_exclude.txt" />
			<arg line="." />
			<arg line="${ssh.user}@${ssh.host}:${remote.path}/" />
		</exec>
	</target>

	<target name="release:rsync:htpasswd"
			description="Installs a .htpasswd file if necessary"
			if="releasing">

		<echo>Uploading .htpasswd</echo>
		<exec
			dir="${project.basedir}"
			executable="rsync"
			checkreturn="false"
			passthru="true">

			<arg line="-ravc" />
			<arg line="--progress" />
			<arg line="--rsh='ssh -p${ssh.port}'" />
			<arg value="${project.basedir}/data/.htpasswd" />
			<arg line="${ssh.user}@${ssh.host}:${remote.path}/" />
		</exec>
	</target>

	<target name="release:rsync:create-userdata-directories"
			description="Creates user data directories on the remote host"
			if="releasing">

		<echo>Creating user data directories</echo>
		<exec
			executable="ssh"
			checkreturn="true"
			passthru="true">

			<arg line="-p ${ssh.port}" />
			<arg line="${ssh.user}@${ssh.host}" />
			<arg line="'mkdir -p ${remote.path}web/{fileadmin/user_upload/_temp_,typo3conf/l10n,typo3temp/llxml,uploads/{media,pics,tf}}'" />
		</exec>
	</target>

	<target name="release:rsync:create-index-html"
			description="Creates index.html files on the remote host to prevent directory listing."
			if="releasing">

		<echo>Creating index.html files to prevent directory listing</echo>
		<exec
			executable="ssh"
			checkreturn="true"
			passthru="true">

			<arg line="-p ${ssh.port}" />
			<arg line="${ssh.user}@${ssh.host}" />
			<arg line="'touch ${remote.path}web/{fileadmin/{user_upload,user_upload/_temp_},typo3temp,uploads/{media,pics,tf}}/index.html'" />
		</exec>
	</target>

	<target name="release:rsync"
			description="Starts the project deployment via rsync"
			depends="release:rsync:project, release:rsync:htpasswd, release:rsync:create-userdata-directories, release:rsync:create-index-html"
			if="releasing">

		<echo>Release successful!</echo>
	</target>

	<target name="release:are-you-sure"
			description="Provides an Are-you-sure dialog before release toolchain runs."
			if="release.target">

		<property
			file="./build.${release.target}.secret.properties"
			prefix="release_properties" />

		<input propertyName="release.abort" validArgs="Y,N">
		You're about to release the current project to a remote host.

		Host: ${release_properties.ssh.host}
		Path: ${release_properties.remote.path}

		Are you sure you want to proceed?
		</input>

		<if>
			<equals arg1="${release.abort}" arg2="N" />
			<then>
				<fail>
		Release aborted!
				</fail>
			</then>
		</if>
	</target>

	<target name="release:prepare"
			description="Prepares the release process"
			if="release.target">

		<echo>Creating temp dir and cloning project...</echo>
		<delete
			dir="/tmp/tmp-${phing.project.name}" />
		<mkdir
			dir="/tmp/tmp-${phing.project.name}" />
	</target>

	<target name="release"
			description="Releases the TYPO3.CMS project"
			depends="release:are-you-sure, release:prepare"
			if="release.target">

		<exec
			command="git config remote.origin.url"
			checkreturn="true"
			outputProperty="git.remote.url" />

		<exec
			dir="/tmp/tmp-${phing.project.name}"
			command="git clone ${git.remote.url} ."
			checkreturn="true"
			passthru="true" />

		<echo>Installing composer into temp dir</echo>
		<exec
			dir="/tmp/tmp-${phing.project.name}"
			command="curl -sS https://getcomposer.org/installer | php"
			passthru="true" />

		<echo>Installing dependencies</echo>
		<exec
			dir="/tmp/tmp-${phing.project.name}"
			command="COMPOSER_PROCESS_TIMEOUT=2000 /usr/bin/env php composer.phar install --no-dev --no-plugins"
			passthru="true" />

		<echo>Installing node.js modules and bower components</echo>
		<exec
			dir="/tmp/tmp-${phing.project.name}"
			command="/usr/bin/env npm install"
			passthru="true" />
		<exec
			dir="/tmp/tmp-${phing.project.name}"
			command="/usr/bin/env bower install --config.interactive=false"
			passthru="true" />

		<echo>Copying secret properties file for ${release.target}</echo>
		<copy
			file="build.${release.target}.secret.properties"
			todir="/tmp/tmp-${phing.project.name}" />

		<echo>Running build toolchain for ${release.target}</echo>
		<exec
			dir="/tmp/tmp-${phing.project.name}"
			executable="/usr/bin/env"
			checkreturn="true"
			passthru="true">

			<arg value="php" />
			<arg value="${project.basedir}/vendor/bin/phing" />
			<arg line="-Denvironment=${release.target}" />
			<arg line="-Dreleasing=1" />
		</exec>
	</target>
</project>